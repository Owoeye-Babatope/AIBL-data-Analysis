{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Owoeye-Babatope/AIBL-data-Analysis/blob/main/Artificial%20Neural%20Network%2C%20k%20Nearest%20Neighbor%20and%20Random%20Forest\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JyG45Qk3qQLS"
      },
      "source": [
        "# COM 737 Machine Learning and Data Modeling. \n",
        "Artificial Neural Network, k Nearest Neighbour and Random Forest Algorithm  \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "both",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 570
        },
        "outputId": "a3aca733-08ec-49c8-a69c-2318e6fbe027",
        "id": "NE_K8SUI_azx"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:57: FutureWarning: The default value of regex will change from True to False in a future version.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "\n",
        "\n",
        "Apoe = pd.read_csv(\"aibl_apoeres_01-Jun-2018.csv\")\n",
        "Apoe = Apoe[Apoe['VISCODE'] == 'bl']\n",
        "Apoe = Apoe.drop(['APTESTDT', 'SITEID', 'VISCODE'], axis=1)\n",
        "\n",
        "\n",
        "CDR = pd.read_csv(\"aibl_cdr_01-Jun-2018.csv\")\n",
        "CDR = CDR[CDR['VISCODE'] == 'bl']\n",
        "CDR = CDR.drop(['EXAMDATE', 'SITEID', 'VISCODE'], axis=1)\n",
        "\n",
        "Bloodtest = pd.read_csv(\"aibl_labdata_01-Jun-2018.csv\")\n",
        "Bloodtest = Bloodtest[Bloodtest['VISCODE'] == 'bl']\n",
        "Bloodtest = Bloodtest.drop(['SITEID', 'VISCODE'], axis=1)\n",
        "\n",
        "\n",
        "Medical_History = pd.read_csv(\"aibl_medhist_01-Jun-2018.csv\")\n",
        "Medical_History = Medical_History[Medical_History['VISCODE'] == 'bl']\n",
        "Medical_History = Medical_History.drop(['SITEID', 'VISCODE'], axis=1)\n",
        "\n",
        "MMSE_Score = pd.read_csv(\"aibl_mmse_01-Jun-2018.csv\")\n",
        "MMSE_Score = MMSE_Score[MMSE_Score['VISCODE'] == 'bl']\n",
        "MMSE_Score = MMSE_Score.drop(['SITEID', 'VISCODE', 'EXAMDATE'], axis=1)\n",
        "\n",
        "\n",
        "LMR_Score = pd.read_csv(\"aibl_neurobat_01-Jun-2018.csv\")\n",
        "LMR_Score = LMR_Score[LMR_Score['VISCODE'] == 'bl']\n",
        "LMR_Score = LMR_Score.drop(['SITEID', 'VISCODE', 'EXAMDATE'], axis=1)\n",
        "\n",
        "\n",
        "Conv = pd.read_csv(\"aibl_pdxconv_01-Jun-2018.csv\")\n",
        "Conv = Conv[Conv['VISCODE'] == 'bl']\n",
        "Conv = Conv.drop(['SITEID', 'VISCODE'], axis=1)\n",
        "\n",
        "\n",
        "Age = pd.read_csv(\"aibl_ptdemog_01-Jun-2018.csv\")\n",
        "Age = Age[Age['VISCODE'] == 'bl']\n",
        "Age = Age.drop(['SITEID', 'VISCODE'], axis=1)\n",
        "\n",
        "\n",
        "merged = pd.merge(Apoe, CDR, how='outer', left_on='RID', right_on='RID')\n",
        "merged = pd.merge(merged, Bloodtest, how='outer', left_on='RID', right_on='RID')\n",
        "merged = pd.merge(merged, Medical_History, how='outer', left_on='RID', right_on='RID')\n",
        "merged = pd.merge(merged, MMSE_Score, how='outer', left_on='RID', right_on='RID')\n",
        "merged = pd.merge(merged, LMR_Score, how='outer', left_on='RID', right_on='RID')\n",
        "merged = pd.merge(merged, Age, how='outer', left_on='RID', right_on='RID')\n",
        "merged = pd.merge(merged, Conv, how='outer', left_on='RID', right_on='RID')\n",
        "# data.to_excel(\"output.xlsx\")\n",
        "\n",
        "#convert column to string\n",
        "merged['PTDOB'] = merged['PTDOB'].astype(str)\n",
        "merged['PTDOB'] = merged['PTDOB'].str.replace(r'\\/', '').str.strip()\n",
        "merged['PTDOB'] = 2022 - merged['PTDOB'].astype('int64')\n",
        "#merged.plot.area(figsize=(12, 4), subplots=True)\n",
        "import matplotlib.pyplot as plt\n",
        "plt.matshow(merged.corr())\n",
        "plt.show()\n",
        "data = merged\n",
        "# Number of -4 values 57323\n",
        "data.loc[data[\"APGEN1\"] == -4, \"APGEN1\"] = 0\n",
        "data.loc[data[\"APGEN2\"] == -4, \"APGEN2\"] = 0\n",
        "data.loc[data[\"CDGLOBAL\"] == -4, \"CDGLOBAL\"] = 0\n",
        "data.loc[data[\"AXT117\"] == -4, \"AXT117\"] = data[\"AXT117\"].mean()\n",
        "data.loc[data[\"BAT126\"] == -4, \"BAT126\"] = data[\"BAT126\"].mean()\n",
        "data.loc[data[\"HMT3\"] == -4, \"HMT3\"] = data[\"HMT3\"].mean()\n",
        "data.loc[data[\"HMT7\"] == -4, \"HMT7\"] = data[\"HMT7\"].mean()\n",
        "data.loc[data[\"HMT13\"] == -4, \"HMT13\"] = data[\"HMT13\"].mean()\n",
        "data.loc[data[\"HMT40\"] == -4, \"HMT40\"] = data[\"HMT40\"].mean()\n",
        "data.loc[data[\"HMT100\"] == -4, \"HMT100\"] = data[\"HMT100\"].mean()\n",
        "data.loc[data[\"HMT102\"] == -4, \"HMT102\"] = data[\"HMT102\"].mean()\n",
        "data.loc[data[\"RCT6\"] == -4, \"RCT6\"] = data[\"RCT6\"].mean()\n",
        "data.loc[data[\"RCT11\"] == -4, \"RCT11\"] = data[\"RCT11\"].mean()\n",
        "data.loc[data[\"RCT20\"] == -4, \"RCT20\"] = data[\"RCT20\"].mean()\n",
        "data.loc[data[\"RCT392\"] == -4, \"RCT392\"] = data[\"RCT392\"].mean()\n",
        "data.loc[data[\"MHPSYCH\"] == -4, \"MHPSYCH\"] = 0\n",
        "data.loc[data[\"MH2NEURL\"] == -4, \"MH2NEURL\"] = 1\n",
        "data.loc[data[\"MH4CARD\"] == -4, \"MH4CARD\"] = 1\n",
        "data.loc[data[\"MH6HEPAT\"] == -4, \"MH6HEPAT\"] = 1\n",
        "data.loc[data[\"MH8MUSCL\"] == -4, \"MH8MUSCL\"] = 1\n",
        "data.loc[data[\"MH9ENDO\"] == -4, \"MH9ENDO\"] = 1\n",
        "data.loc[data[\"MH10GAST\"] == -4, \"MH10GAST\"] = 1\n",
        "data.loc[data[\"MH12RENA\"] == -4, \"MH12RENA\"] = 1 # \n",
        "data.loc[data[\"MH16SMOK\"] == -4, \"MH16SMOK\"] = 1\n",
        "data.loc[data[\"MH17MALI\"] == -4, \"MH17MALI\"] = 1\n",
        "data.loc[data[\"MMSCORE\"] == -4, \"MMSCORE\"] = 0\n",
        "data.loc[data[\"LIMMTOTAL\"] == -4, \"LIMMTOTAL\"] = 0 # Why 0 \n",
        "data.loc[data[\"LDELTOTAL\"] == -4, \"LDELTOTAL\"] = 0\n",
        "data.drop_duplicates(subset='RID')\n",
        "data = data.drop('RID', axis=1)\n",
        "data.loc[data['DXCURREN'] == 1, 'DXCURREN'] = 0\n",
        "data.loc[data['DXCURREN'] > 1, 'DXCURREN'] = 1\n",
        "data # Clean Data\n",
        "# data.to_excel(\"preprocessed_data.xlsx\")\n",
        "\n",
        "plt.matshow(merged.corr())\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "adata = data\n",
        "X = adata.iloc[:, 0:-1].values\n",
        "Y = adata.iloc[:, -1].values\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder as LE\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from keras.utils import np_utils\n",
        "from sklearn.model_selection import train_test_split as tts\n",
        "from sklearn.preprocessing import StandardScaler as sc\n",
        "from keras.utils.vis_utils import plot_model\n",
        "\n",
        "oh = OneHotEncoder()\n",
        "encoder = LE()\n",
        "encoder.fit(Y)\n",
        "encoder_Y = encoder.transform(Y)\n",
        "Yn= np_utils.to_categorical(encoder_Y)\n",
        "\n",
        "#Splitting the data into independent train and test and dependent train and test.\n",
        "X_traino, X_testo, Y_traino, Y_testo = tts(X, Yn, test_size=0.2, random_state = 0)\n",
        "\n",
        "Y_train = Y_traino\n",
        "Y_test = Y_testo\n",
        "\n",
        "sc = sc() \n",
        "X_train = sc.fit_transform(X_traino)\n",
        "X_test = sc.transform(X_testo)\n",
        "adata = adata.drop(['CDGLOBAL'], axis=1)\n",
        "print(X_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A5SsvLibdzN0",
        "outputId": "0312bdb0-1b35-4d14-c401-86858d22fa17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 0.96815557  0.24643195 -0.5847525  ...  1.33213039  0.90175268\n",
            "  -0.09178298]\n",
            " [-0.37672183  0.24643195 -0.5847525  ... -0.13289409 -1.10895152\n",
            "  -0.09178298]\n",
            " [-0.37672183  0.24643195 -0.5847525  ... -1.0485344   0.90175268\n",
            "   0.74581271]\n",
            " ...\n",
            " [-0.37672183  0.24643195 -0.5847525  ...  0.05023397 -1.10895152\n",
            "   0.0478163 ]\n",
            " [ 0.96815557  0.24643195  0.68221125 ... -1.23166246  0.90175268\n",
            "   0.74581271]\n",
            " [-0.37672183  0.24643195  0.68221125 ... -1.23166246 -1.10895152\n",
            "  -0.23138226]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build the ANN model\n",
        "\n",
        "ANN  = tf.keras.models.Sequential()\n",
        "\n",
        "# First Layr\n",
        "\n",
        "ANN.add(tf.keras.layers.Dense(units=6, activation='relu'))\n",
        "\n",
        "# Second Layer\n",
        "\n",
        "ANN.add(tf.keras.layers.Dense(units=6, activation='relu'))\n",
        "\n",
        "\n",
        "\n",
        "# Design output layer\n",
        "\n",
        "ANN.add(tf.keras.layers.Dense(units=3, activation=\"softmax\"))\n",
        "\n",
        "\n",
        "ANN.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=['accuracy'])\n",
        "\n",
        "\n",
        "\n",
        "result = ANN.fit(X_train,Y_train,batch_size=32,epochs = 100)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1stKsD04MEhW",
        "outputId": "1d562ba6-ebdc-42e1-c447-0f004d23b117"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "22/22 [==============================] - 1s 2ms/step - loss: 1.3057 - accuracy: 0.0668\n",
            "Epoch 2/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 1.1946 - accuracy: 0.1524\n",
            "Epoch 3/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 1.1191 - accuracy: 0.2961\n",
            "Epoch 4/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 1.0632 - accuracy: 0.4528\n",
            "Epoch 5/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 1.0152 - accuracy: 0.5689\n",
            "Epoch 6/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.9695 - accuracy: 0.6343\n",
            "Epoch 7/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.9243 - accuracy: 0.6909\n",
            "Epoch 8/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.8821 - accuracy: 0.7271\n",
            "Epoch 9/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.8431 - accuracy: 0.7518\n",
            "Epoch 10/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.8052 - accuracy: 0.7837\n",
            "Epoch 11/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.7673 - accuracy: 0.8113\n",
            "Epoch 12/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.7281 - accuracy: 0.8374\n",
            "Epoch 13/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.6868 - accuracy: 0.8578\n",
            "Epoch 14/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.6405 - accuracy: 0.8766\n",
            "Epoch 15/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.5899 - accuracy: 0.8897\n",
            "Epoch 16/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.5350 - accuracy: 0.8940\n",
            "Epoch 17/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.4781 - accuracy: 0.9013\n",
            "Epoch 18/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.4248 - accuracy: 0.9071\n",
            "Epoch 19/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.3783 - accuracy: 0.9115\n",
            "Epoch 20/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.3393 - accuracy: 0.9144\n",
            "Epoch 21/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.3086 - accuracy: 0.9202\n",
            "Epoch 22/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.2849 - accuracy: 0.9216\n",
            "Epoch 23/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.2645 - accuracy: 0.9260\n",
            "Epoch 24/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.2497 - accuracy: 0.9289\n",
            "Epoch 25/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.2374 - accuracy: 0.9303\n",
            "Epoch 26/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.2269 - accuracy: 0.9318\n",
            "Epoch 27/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.2186 - accuracy: 0.9332\n",
            "Epoch 28/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.2110 - accuracy: 0.9332\n",
            "Epoch 29/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.2046 - accuracy: 0.9332\n",
            "Epoch 30/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1989 - accuracy: 0.9347\n",
            "Epoch 31/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1940 - accuracy: 0.9347\n",
            "Epoch 32/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1890 - accuracy: 0.9361\n",
            "Epoch 33/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1852 - accuracy: 0.9361\n",
            "Epoch 34/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1802 - accuracy: 0.9361\n",
            "Epoch 35/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1762 - accuracy: 0.9376\n",
            "Epoch 36/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1721 - accuracy: 0.9390\n",
            "Epoch 37/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1680 - accuracy: 0.9405\n",
            "Epoch 38/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1642 - accuracy: 0.9390\n",
            "Epoch 39/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1607 - accuracy: 0.9419\n",
            "Epoch 40/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1573 - accuracy: 0.9419\n",
            "Epoch 41/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1545 - accuracy: 0.9419\n",
            "Epoch 42/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1509 - accuracy: 0.9434\n",
            "Epoch 43/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1488 - accuracy: 0.9419\n",
            "Epoch 44/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1460 - accuracy: 0.9419\n",
            "Epoch 45/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1431 - accuracy: 0.9463\n",
            "Epoch 46/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1402 - accuracy: 0.9478\n",
            "Epoch 47/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1379 - accuracy: 0.9478\n",
            "Epoch 48/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1356 - accuracy: 0.9507\n",
            "Epoch 49/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1336 - accuracy: 0.9492\n",
            "Epoch 50/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1315 - accuracy: 0.9507\n",
            "Epoch 51/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1294 - accuracy: 0.9507\n",
            "Epoch 52/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1274 - accuracy: 0.9507\n",
            "Epoch 53/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1255 - accuracy: 0.9536\n",
            "Epoch 54/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1237 - accuracy: 0.9521\n",
            "Epoch 55/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1219 - accuracy: 0.9536\n",
            "Epoch 56/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1197 - accuracy: 0.9536\n",
            "Epoch 57/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1183 - accuracy: 0.9536\n",
            "Epoch 58/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1169 - accuracy: 0.9623\n",
            "Epoch 59/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1152 - accuracy: 0.9652\n",
            "Epoch 60/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1138 - accuracy: 0.9652\n",
            "Epoch 61/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1129 - accuracy: 0.9666\n",
            "Epoch 62/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1113 - accuracy: 0.9666\n",
            "Epoch 63/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1102 - accuracy: 0.9695\n",
            "Epoch 64/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1086 - accuracy: 0.9681\n",
            "Epoch 65/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1072 - accuracy: 0.9695\n",
            "Epoch 66/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1064 - accuracy: 0.9695\n",
            "Epoch 67/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1046 - accuracy: 0.9710\n",
            "Epoch 68/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1039 - accuracy: 0.9710\n",
            "Epoch 69/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1022 - accuracy: 0.9724\n",
            "Epoch 70/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1011 - accuracy: 0.9724\n",
            "Epoch 71/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.1001 - accuracy: 0.9724\n",
            "Epoch 72/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0990 - accuracy: 0.9739\n",
            "Epoch 73/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0978 - accuracy: 0.9739\n",
            "Epoch 74/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0968 - accuracy: 0.9739\n",
            "Epoch 75/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0956 - accuracy: 0.9739\n",
            "Epoch 76/100\n",
            "22/22 [==============================] - 0s 3ms/step - loss: 0.0950 - accuracy: 0.9739\n",
            "Epoch 77/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0938 - accuracy: 0.9739\n",
            "Epoch 78/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0923 - accuracy: 0.9739\n",
            "Epoch 79/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0917 - accuracy: 0.9739\n",
            "Epoch 80/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0905 - accuracy: 0.9753\n",
            "Epoch 81/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0895 - accuracy: 0.9753\n",
            "Epoch 82/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0888 - accuracy: 0.9753\n",
            "Epoch 83/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0875 - accuracy: 0.9739\n",
            "Epoch 84/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0872 - accuracy: 0.9739\n",
            "Epoch 85/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0857 - accuracy: 0.9753\n",
            "Epoch 86/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0848 - accuracy: 0.9753\n",
            "Epoch 87/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0835 - accuracy: 0.9753\n",
            "Epoch 88/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0832 - accuracy: 0.9753\n",
            "Epoch 89/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0822 - accuracy: 0.9753\n",
            "Epoch 90/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0809 - accuracy: 0.9753\n",
            "Epoch 91/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0802 - accuracy: 0.9753\n",
            "Epoch 92/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0799 - accuracy: 0.9753\n",
            "Epoch 93/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0783 - accuracy: 0.9753\n",
            "Epoch 94/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0775 - accuracy: 0.9768\n",
            "Epoch 95/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0765 - accuracy: 0.9768\n",
            "Epoch 96/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0758 - accuracy: 0.9768\n",
            "Epoch 97/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0748 - accuracy: 0.9768\n",
            "Epoch 98/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0743 - accuracy: 0.9768\n",
            "Epoch 99/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0736 - accuracy: 0.9782\n",
            "Epoch 100/100\n",
            "22/22 [==============================] - 0s 2ms/step - loss: 0.0733 - accuracy: 0.9782\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #pip install visualkeras"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mltij5LXZPHJ",
        "outputId": "f06b4a49-8672-4694-dcc0-f457f015ca87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting visualkeras\n",
            "  Downloading visualkeras-0.0.2-py3-none-any.whl (12 kB)\n",
            "Collecting aggdraw>=1.3.11\n",
            "  Downloading aggdraw-1.3.14-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (992 kB)\n",
            "\u001b[K     |████████████████████████████████| 992 kB 16.5 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.18.1 in /usr/local/lib/python3.7/dist-packages (from visualkeras) (1.21.6)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from visualkeras) (7.1.2)\n",
            "Installing collected packages: aggdraw, visualkeras\n",
            "Successfully installed aggdraw-1.3.14 visualkeras-0.0.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import visualkeras # Kindly instal the visualkeras above to see the layers graphically\n",
        "tf.keras.Model()\n",
        "\n",
        "plot_model(ANN, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\n",
        "ANN.summary()\n",
        "\n",
        "visualkeras.layered_view(ANN)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "B6oOiTmbjvoN",
        "outputId": "9de993df-f982-447b-b4a7-9468858feaaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 6)                 186       \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 6)                 42        \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 3)                 21        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 249\n",
            "Trainable params: 249\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGBA size=107x27 at 0x7F86D2F87E10>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGsAAAAbCAYAAAB7nXHNAAACkElEQVR4nO2aX2hSURzHv26lspq2FBFZ5VzUuNEfektd0aAk+vPWS/QSPfWQTz0Vi/UWI9pDUBMGQeRLQTTDPwv6g7RcbEUwFSocNyelZty5UKbM3Z4cM3Fer1t67s7n9Z5zvj9+n3s5B+6R8TzPQyQjw0Po778B80Gd2CVK+BhOIfozA4vVCoPBUHFcKj6DcCgE8yHyc2fjGbhcLpw+c7bq+E1ig0aGh3Br4CbG7p/A7h0qscssYx+cQC5fgKZDCYfDAYZhVsn1YOyBNHK3b1Oiy9QtaE6LmKCiKPe9vjUr3O2PYfTuUWjUSppbgZplrWfhps6tNHcVapK10RrWTKKAGmRttIY1mygAkAk5DdqvXITH/QJtilbIN4va5kpYLPD4Fk3jyH4ttrSVnnHeTCZh7u2DSqVCNPIZqV8JSeTO/cnhyW1LmSjr5dd45h6veLBZSdXTYD6fx3x6Dod7tDh/0iS+4hU8fTmD1hbgwqldZc+mwhxsNhv0ej2cD79jp6YgidzsQk70F1Wkqiy5XA6jsQtQx9es+FCEQ3Yhj3PHOsueDT76CpvNBoZh8GX6PcAFJJE7FUrUvU793zjlv0FlEQSVRRBUFkFQWQRBZREElUUQVBZBUFkEQWURhOg/xetFLl+Az+dDMBgEy7IwqqWdu7Qk/FZFU8lyelmkM4vw+/1QKBRIxlgYDygknTufLUCnE3ano2lkOb0s7jyewcSHT9iztwcAMHD9KsAFJJ3rfzcJrVYraE5T7FnFwl+9DSw3jOaW03BZpDWskbkNlUViwxqZ2zBZsWS2IQ0jOVfQHYxr9kvwukexr7tDVMi/hCIcZhMZWHqPo7298mWUH+w0uN8JSeTykOG5Z7yuF+Qvlh0PgJxm0U0AAAAASUVORK5CYII=\n"
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy.core.fromnumeric import diagonal\n",
        "\n",
        "# Confusion Matrix of ANN\n",
        "prediction = ANN.predict(X_test)\n",
        "# print(prediction)\n",
        "from sklearn.metrics import confusion_matrix as cmm\n",
        "\n",
        "ANN_cum =  cmm(Y_test.argmax(axis=1), prediction.argmax(axis=1))\n",
        "\n",
        "ANN_cum\n",
        "\n",
        "\n",
        "# IMporting KNN Classifier\n",
        "from sklearn.neighbors import KNeighborsClassifier as KNC\n",
        "\n",
        "classifier = KNC(n_neighbors = 5)\n",
        "classifier.fit(X_train, Y_train)\n",
        "Y_pred = classifier.predict(X_test)\n",
        "\n",
        "\n",
        "\n",
        "# Confusion Matrix of kNN\n",
        "\n",
        "KNN_cum = cmm(Y_test.argmax(axis=1), Y_pred.argmax(axis=1))\n",
        "print('ANN Confusion Matrix \\n', ANN_cum, '\\n\\n', 'ANN PRediction Accuracy\\n', sum(diagonal(ANN_cum))/sum(sum(ANN_cum)), '\\n\\n')\n",
        "print('KNN Confusion Matrix \\n', KNN_cum, '\\n\\n', 'KNN PRediction Accuracy\\n', sum(diagonal(KNN_cum))/sum(sum(KNN_cum)), '\\n\\n')\n"
      ],
      "metadata": {
        "id": "m8kNWdt8Ow4e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e677306f-397b-4e70-945a-d78ca9b6d9b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ANN Confusion Matrix \n",
            " [[123   7]\n",
            " [  6  37]] \n",
            "\n",
            " ANN PRediction Accuracy\n",
            " 0.9248554913294798 \n",
            "\n",
            "\n",
            "KNN Confusion Matrix \n",
            " [[126   4]\n",
            " [ 23  20]] \n",
            "\n",
            " KNN PRediction Accuracy\n",
            " 0.8439306358381503 \n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "# Building a Random Forest Model\n",
        "from sklearn.ensemble import RandomForestClassifier as RFC\n",
        "RF_data = data\n",
        "\n",
        "# Create RF Classifier\n",
        "RF = RFC(n_estimators=100)\n",
        "\n",
        "#Split the data into train and test data\n",
        "XRF = RF_data.iloc[:, 0:-1]\n",
        "YRF = RF_data.iloc[:, -1]\n",
        "X_trainRF, X_testRF, Y_trainRF, Y_testRF = tts(XRF, YRF, test_size=0.2, random_state = 42)\n",
        "\n",
        "\n",
        "#Train the RF model on the trained data\n",
        "RF.fit(X_trainRF, Y_trainRF)\n",
        "\n",
        "#Using the RF model for prediction with the test dataset\n",
        "Y_predict = RF.predict(X_testRF)\n",
        "\n",
        "print('RF Accuracy', metrics.accuracy_score(Y_testRF, Y_predict))\n",
        "\n",
        "col = list(RF_data.columns)\n",
        "col = col[0:-1]\n",
        "print(col)\n",
        "feature_imp = pd.Series(RF.feature_importances_, index=col ).sort_values(ascending=False)\n",
        "print('Feature rating based on importance ')\n",
        "print(feature_imp)\n",
        "\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "conf_mat = confusion_matrix(Y_testRF, Y_predict)\n",
        "print(conf_mat)"
      ],
      "metadata": {
        "id": "svDU83lUPH8r",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2d5c0e96-6642-46b0-95bf-10eced4d0b31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RF Accuracy 0.930635838150289\n",
            "['APGEN1', 'APGEN2', 'CDGLOBAL', 'AXT117', 'BAT126', 'HMT3', 'HMT7', 'HMT13', 'HMT40', 'HMT100', 'HMT102', 'RCT6', 'RCT11', 'RCT20', 'RCT392', 'MHPSYCH', 'MH2NEURL', 'MH4CARD', 'MH6HEPAT', 'MH8MUSCL', 'MH9ENDO', 'MH10GAST', 'MH12RENA', 'MH16SMOK', 'MH17MALI', 'MMSCORE', 'LIMMTOTAL', 'LDELTOTAL', 'PTGENDER', 'PTDOB']\n",
            "CDGLOBAL     0.342603\n",
            "LDELTOTAL    0.206654\n",
            "MMSCORE      0.107679\n",
            "LIMMTOTAL    0.083126\n",
            "HMT13        0.019514\n",
            "RCT20        0.019423\n",
            "PTDOB        0.017770\n",
            "BAT126       0.016506\n",
            "HMT3         0.015729\n",
            "HMT7         0.015490\n",
            "HMT40        0.015488\n",
            "RCT6         0.015267\n",
            "RCT392       0.014962\n",
            "HMT100       0.014938\n",
            "AXT117       0.014377\n",
            "HMT102       0.013309\n",
            "RCT11        0.011013\n",
            "APGEN1       0.009690\n",
            "MH2NEURL     0.008988\n",
            "APGEN2       0.007997\n",
            "MH16SMOK     0.004885\n",
            "PTGENDER     0.004582\n",
            "MHPSYCH      0.003827\n",
            "MH8MUSCL     0.003724\n",
            "MH10GAST     0.003019\n",
            "MH9ENDO      0.002372\n",
            "MH4CARD      0.002075\n",
            "MH6HEPAT     0.002013\n",
            "MH17MALI     0.002006\n",
            "MH12RENA     0.000975\n",
            "dtype: float64\n",
            "[[  0   0   1]\n",
            " [  0 113   6]\n",
            " [  0   5  48]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Test your model with missing data\n",
        "RF.predict([[3,2,1,\t1.21,\t280.562,\t5.07,\t6.1,\t214,\t0,\t30.7,\t33.6,\t40.247,\t84.675,\t158.526,\t1.188,\t0,\t1,\t1,\t0,\t1,\t0,\t0,\t1,\t1,\t1,\t15,\t2,\t0,\t1,\t75]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BvYSfndlZ60_",
        "outputId": "1c65fded-8aa6-483a-9c49-3395ef8fdf7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  \"X does not have valid feature names, but\"\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Overview_of_Colaboratory_Features.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}